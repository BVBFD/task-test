"use client";

import React, { useState, useEffect, useRef } from "react";
import styles from "./page.module.css";
import Head from "next/head";
import Image from "next/image";

const fetchedData = [
  {
    _id: 1,
    imgUrl:
      "https://res.cloudinary.com/dewa3t2gi/image/upload/v1706577376/myportfolioblogproject/tbevcymwqnd2brnhcs4j.gif",
  },
  {
    _id: 2,
    imgUrl:
      "https://res.cloudinary.com/dewa3t2gi/image/upload/v1677818589/myportfolioblogproject/ta2ew0kg9unlstsv3g3m.gif",
  },
  {
    _id: 3,
    imgUrl:
      "https://res.cloudinary.com/dewa3t2gi/image/upload/v1679554666/myportfolioblogproject/qae9fi8bjtpuoc5qjse7.gif",
  },
  {
    _id: 4,
    imgUrl:
      "https://res.cloudinary.com/dewa3t2gi/image/upload/v1678437768/myportfolioblogproject/qpyzc9k1w06m1ldplwmw.gif",
  },
  {
    _id: 5,
    imgUrl:
      "https://res.cloudinary.com/dewa3t2gi/image/upload/v1676974927/myportfolioblogproject/od9rqmzhmhdmwusqk5qe.gif",
  },
];

interface DataType {
  _id: number;
  imgUrl: string;
}

export default function Home() {
  const [data, setData] = useState<DataType[]>([]);
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState<boolean>(false);
  const containerRef = useRef<HTMLDivElement>(null);

  const getMoreData = async () => {
    setLoading(true);
    try {
      setData([...data, ...fetchedData]);
      setPage((prev) => prev + 1);
      setLoading(false);
    } catch (error) {
      setLoading(false);
    }
  };

  useEffect(() => {
    const handleWheelEvent = (e: WheelEvent) => {
      if (containerRef.current) {
        containerRef.current.scrollLeft += e.deltaY;
      }
    };
    const handleScrollEvent = () => {
      if (containerRef.current) {
        const { scrollLeft, clientWidth, scrollWidth } = containerRef.current;

        if (scrollLeft + clientWidth >= scrollWidth) {
          getMoreData();
        }
      }
    };

    if (containerRef.current) {
      containerRef.current.addEventListener("wheel", handleWheelEvent);
      containerRef.current.addEventListener("scroll", handleScrollEvent);
    }

    return () => {
      if (containerRef.current) {
        containerRef.current.removeEventListener("wheel", handleWheelEvent);
        containerRef.current.removeEventListener("scroll", handleScrollEvent);
      }
    };
  }, [data]);

  useEffect(() => {
    getMoreData();
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className={styles.container} ref={containerRef}>
        {data.map((item, index) => (
          <div className={styles.imgBox} key={index}>
            <Image
              src={item.imgUrl}
              alt={`${item._id}`}
              objectFit="cover"
              width={500}
              height={250}
            />
          </div>
        ))}
      </section>
    </>
  );
}
